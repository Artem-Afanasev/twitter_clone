import { Sequelize } from 'sequelize';
import { Like, Tweet, User, PostImage } from '../../models/index.js';

export const getLikedTweets = async (req, res) => {
    try {
        const userId = req.userId;
        console.log(`üîÑ –ü–æ–ª—É—á–µ–Ω–∏–µ –ª–∞–π–∫–Ω—É—Ç—ã—Ö –ø–æ—Å—Ç–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}`);

        // –ü—Ä–æ—Å—Ç–æ–π –∏ –Ω–∞–¥–µ–∂–Ω—ã–π –ø–æ–¥—Ö–æ–¥: –¥–≤–∞ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–∞
        const userLikes = await Like.findAll({
            where: { userId },
            attributes: ['tweetId'],
            raw: true,
        });

        const tweetIds = userLikes.map((like) => like.tweetId);

        if (tweetIds.length === 0) {
            console.log('‚úÖ –ù–µ—Ç –ª–∞–π–∫–Ω—É—Ç—ã—Ö –ø–æ—Å—Ç–æ–≤');
            return res.json([]);
        }

        // –ü–æ–ª—É—á–∞–µ–º —Ç–≤–∏—Ç—ã —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ –∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏
        const likedTweets = await Tweet.findAll({
            where: {
                id: tweetIds,
            },
            include: [
                {
                    model: User,
                    as: 'user',
                    attributes: ['id', 'username', 'email', 'avatar'],
                },
                {
                    model: PostImage,
                    as: 'images',
                    attributes: ['imageUrl'],
                },
            ],
            order: [['createdAt', 'DESC']],
        });

        console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ —Ç–≤–∏—Ç–æ–≤: ${likedTweets.length}`);

        // –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–∞–π–∫–æ–≤ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–≤–∏—Ç–∞
        const postsWithLikes = await Promise.all(
            likedTweets.map(async (tweet) => {
                try {
                    const likesCount = await Like.count({
                        where: { tweetId: tweet.id },
                    });

                    const post = tweet.toJSON();

                    // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∞–≤–∞—Ç–∞—Ä
                    if (
                        post.user?.avatar &&
                        !post.user.avatar.startsWith('http')
                    ) {
                        post.user.avatar = `http://localhost:5000${post.user.avatar}`;
                    }

                    // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
                    if (post.images && post.images.length > 0) {
                        post.images = post.images.map((img) => {
                            let url = img.imageUrl;
                            if (url && !url.startsWith('http')) {
                                url = `http://localhost:5000${url}`;
                            }
                            return url;
                        });
                    } else {
                        post.images = [];
                    }

                    // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ª–∞–π–∫–∞—Ö
                    post.likesCount = likesCount;
                    post.isLiked = true; // –í—Å–µ —ç—Ç–∏ –ø–æ—Å—Ç—ã –ª–∞–π–∫–Ω—É—Ç—ã —Ç–µ–∫—É—â–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º

                    return post;
                } catch (error) {
                    console.error(`‚ùå –û—à–∏–±–∫–∞ –¥–ª—è —Ç–≤–∏—Ç–∞ ${tweet.id}:`, error);
                    return tweet.toJSON();
                }
            })
        );

        console.log(`‚úÖ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ—Å—Ç–æ–≤: ${postsWithLikes.length}`);
        res.json(postsWithLikes);
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ª–∞–π–∫–Ω—É—Ç—ã—Ö –ø–æ—Å—Ç–æ–≤:', error);
        res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ª–∞–π–∫–Ω—É—Ç—ã—Ö –ø–æ—Å—Ç–æ–≤' });
    }
};
