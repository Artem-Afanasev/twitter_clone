import { Like, Tweet } from '../../models/index.js';

export const likeTweet = async (req, res) => {
    try {
        const userId = req.userId;
        const { tweetId } = req.params;

        console.log(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId} –ø—ã—Ç–∞–µ—Ç—Å—è –ª–∞–π–∫–Ω—É—Ç—å —Ç–≤–∏—Ç ${tweetId}`);

        const tweet = await Tweet.findByPk(tweetId);
        if (!tweet) {
            console.log('–¢–≤–∏—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω');
            return res.status(404).json({ error: '–¢–≤–∏—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω' });
        }

        const existingLike = await Like.findOne({
            where: { userId, tweetId },
        });

        if (existingLike) {
            console.log('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –ª–∞–π–∫–Ω—É–ª —ç—Ç–æ—Ç —Ç–≤–∏—Ç');
            return res.status(400).json({ error: '–í—ã —É–∂–µ –ª–∞–π–∫–Ω—É–ª–∏ —ç—Ç–æ—Ç —Ç–≤–∏—Ç' });
        }

        const like = await Like.create({
            userId,
            tweetId,
        });

        console.log('‚úÖ –õ–∞–π–∫ —Å–æ–∑–¥–∞–Ω:', like.id);

        const likeCount = await Like.count({ where: { tweetId } });

        res.status(201).json({
            message: '–¢–≤–∏—Ç –ª–∞–π–∫–Ω—É—Ç',
            likeId: like.id,
            likeCount: likeCount,
        });
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ª–∞–π–∫–µ —Ç–≤–∏—Ç–∞:', error);
        res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
    }
};

export const unlikeTweet = async (req, res) => {
    try {
        const userId = req.userId;
        const { tweetId } = req.params;

        console.log(
            `üîÑ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId} –ø—ã—Ç–∞–µ—Ç—Å—è —É–±—Ä–∞—Ç—å –ª–∞–π–∫ —Å —Ç–≤–∏—Ç–∞ ${tweetId}`
        );

        const like = await Like.findOne({
            where: { userId, tweetId },
        });

        if (!like) {
            console.log('‚ùå –õ–∞–π–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω');
            return res.status(404).json({ error: '–õ–∞–π–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω' });
        }

        await like.destroy();

        const likeCount = await Like.count({ where: { tweetId } });

        console.log('‚úÖ –õ–∞–π–∫ —É–¥–∞–ª–µ–Ω');

        res.json({
            message: '–õ–∞–π–∫ —É–¥–∞–ª–µ–Ω',
            likeCount: likeCount,
        });
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ª–∞–π–∫–∞:', error);
        res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
    }
};

export const checkUserLike = async (req, res) => {
    try {
        const userId = req.userId;
        const { tweetId } = req.params;

        const like = await Like.findOne({
            where: { userId, tweetId },
        });

        res.json({
            liked: !!like,
            likeId: like ? like.id : null,
        });
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ª–∞–π–∫–∞:', error);
        res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
    }
};

export const getTweetLikes = async (req, res) => {
    try {
        const { tweetId } = req.params;

        const likeCount = await Like.count({ where: { tweetId } });

        res.json({ likeCount });
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ª–∞–π–∫–æ–≤:', error);
        res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
    }
};

export const getUserLikes = async (req, res) => {
    try {
        const userId = req.userId;

        const likes = await Like.findAll({
            where: { userId },
            include: [
                {
                    model: Tweet,
                    include: [
                        {
                            model: User,
                            as: 'user',
                            attributes: ['id', 'username', 'avatar'],
                        },
                    ],
                },
            ],
            order: [['createdAt', 'DESC']],
        });

        res.json(likes);
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ª–∞–π–∫–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
        res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
    }
};
