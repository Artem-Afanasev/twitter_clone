// controllers/posts/deletePost.js
import { Tweet } from '../../models/index.js';

export const deletePost = async (req, res) => {
    try {
        const postId = req.params.id;
        const userId = req.userId; // –∏–∑ middleware –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏

        console.log('üîÑ –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ—Å—Ç–∞:', postId, '–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º:', userId);

        // –ù–∞—Ö–æ–¥–∏–º –ø–æ—Å—Ç –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —è–≤–ª—è–µ—Ç—Å—è –µ–≥–æ –∞–≤—Ç–æ—Ä–æ–º
        const post = await Tweet.findOne({
            where: {
                id: postId,
            },
        });

        if (!post) {
            return res.status(404).json({
                error: '–¢–≤–∏—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω',
            });
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–¥–∞–ª—è–µ—Ç —Å–≤–æ–π —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π –ø–æ—Å—Ç
        if (post.userId !== userId) {
            return res.status(403).json({
                error: '–ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å —á—É–∂–æ–π —Ç–≤–∏—Ç',
            });
        }

        // –£–¥–∞–ª—è–µ–º –ø–æ—Å—Ç
        await post.destroy();

        console.log('‚úÖ –¢–≤–∏—Ç —É–¥–∞–ª–µ–Ω:', postId);
        res.json({ message: '–¢–≤–∏—Ç —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω' });
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ç–≤–∏—Ç–∞:', error);
        res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ç–≤–∏—Ç–∞' });
    }
};
