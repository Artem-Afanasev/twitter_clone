import { User, Tweet, PostImage } from '../../models/index.js';

export const getAllPosts = async (req, res) => {
    try {
        const posts = await Tweet.findAll({
            include: [
                {
                    model: User,
                    as: 'user',
                    attributes: ['id', 'username', 'email', 'avatar'],
                },
                {
                    model: PostImage,
                    as: 'images',
                    attributes: ['imageUrl', 'order'],
                },
            ],
            order: [
                ['createdAt', 'DESC'],
                [{ model: PostImage, as: 'images' }, 'order', 'ASC'],
            ],
            limit: 100,
        });

        console.log('üìä –ù–∞–π–¥–µ–Ω–æ –ø–æ—Å—Ç–æ–≤:', posts.length); // –î–æ–±–∞–≤–∏–º –æ—Ç–ª–∞–¥–∫—É

        const formattedPosts = posts.map((post) => {
            const postData = post.toJSON();

            // –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
            console.log(`üìù –ü–æ—Å—Ç ${postData.id}:`, {
                content: postData.content,
                user: postData.user?.username,
                imagesCount: postData.images?.length,
                images: postData.images,
            });

            // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∞–≤–∞—Ç–∞—Ä
            if (
                postData.user &&
                postData.user.avatar &&
                !postData.user.avatar.startsWith('http')
            ) {
                postData.user.avatar = `http://localhost:5000${postData.user.avatar}`;
            }

            // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ—Å—Ç–∞
            if (postData.images && postData.images.length > 0) {
                postData.images = postData.images.map((img) => {
                    let url = img.imageUrl;
                    if (url && !url.startsWith('http')) {
                        url = `http://localhost:5000${url}`;
                    }
                    return url;
                });

                console.log(
                    'üñºÔ∏è –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:',
                    postData.images
                );
            }

            return postData;
        });

        res.json(formattedPosts);
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ª–µ–Ω—Ç—ã:', error);
        res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ª–µ–Ω—Ç—ã' });
    }
};
