import User from '../../models/Users.js';

export const getProfile = async (req, res) => {
    try {
        const userId = req.userId; // –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è, —á—Ç–æ userId –¥–æ–±–∞–≤–ª—è–µ—Ç—Å—è –≤ req —á–µ—Ä–µ–∑ middleware –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏

        const user = await User.findByPk(userId, {
            attributes: ['id', 'username', 'email', 'createdAt'], // –ò—Å–∫–ª—é—á–∞–µ–º –ø–∞—Ä–æ–ª—å –∏ –¥—Ä—É–≥–∏–µ —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        });

        if (!user) {
            return res.status(404).json({ error: 'User not found' });
        }

        res.status(200).json({
            message: '‚úÖ User profile retrieved successfully',
            user: {
                id: user.id,
                username: user.username,
                email: user.email,
                createdAt: user.createdAt,
            },
        });
    } catch (error) {
        res.status(500).json({ error: error.message });
    }
};

export const updateProfile = async (req, res) => {
    try {
        const userId = req.userId;
        const { username, email } = req.body;

        const user = await User.findByPk(userId);
        if (!user) {
            return res.status(404).json({ error: 'User not found' });
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–µ –ø–æ–ª—è
        if (username) user.username = username;
        if (email) user.email = email;

        await user.save();

        res.status(200).json({
            message: '‚úÖ User profile updated successfully',
            user: {
                id: user.id,
                username: user.username,
                email: user.email,
                updatedAt: user.updatedAt,
            },
        });
    } catch (error) {
        if (error.name === 'SequelizeUniqueConstraintError') {
            return res
                .status(400)
                .json({ error: 'Email or username already exists' });
        }
        res.status(500).json({ error: error.message });
    }
};

export const getMyPosts = async (req, res) => {
    try {
        const userId = req.userId; // userId –∏–∑ middleware –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏

        console.log('üîÑ –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Å—Ç–æ–≤ –¥–ª—è userId:', userId);

        const posts = await Tweet.findAll({
            where: { userId: userId },
            include: [
                {
                    model: User,
                    attributes: ['id', 'username', 'email'],
                },
            ],
            order: [['createdAt', 'DESC']],
        });

        console.log('‚úÖ –ù–∞–π–¥–µ–Ω–æ –ø–æ—Å—Ç–æ–≤:', posts.length);
        res.json(posts);
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ—Å—Ç–æ–≤:', error);
        res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø–æ—Å—Ç–æ–≤' });
    }
};
